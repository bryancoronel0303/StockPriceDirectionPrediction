# -*- coding: utf-8 -*-
"""logistic_randomsearch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nIrUwNOBh9GinY3At1Rz3Y0Se_H3iewG

# 0. Install/Load Dependencies
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import RandomizedSearchCV
from sklearn.model_selection import TimeSeriesSplit
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, roc_auc_score, f1_score, precision_score, recall_score, confusion_matrix

"""# 1. Data Pre-Processing, Feature Eng"""

df = pd.read_csv("/content/drive/MyDrive/spy.csv")

df['Average'] = df[['Open', 'Close', 'High', 'Low']].mean(axis=1)
df['HL_PCT'] = (df['High'] - df['Low']) / df['Low']
df['PCT_change'] = (df['Close'] - df['Open']) / df['Open']

df['Volume_pct_change'] = df['Volume'].pct_change() 
df["Target"] = (df["Close"] > df["Open"]).shift(periods=-1, fill_value=0).astype(int)

def macd(data, short=12, long=26, signal=9):
    exp1 = data['Close'].ewm(span=short, adjust=False).mean()
    exp2 = data['Close'].ewm(span=long, adjust=False).mean()
    macd = exp1 - exp2
    signal_line = macd.ewm(span=signal, adjust=False).mean()
    return macd, signal_line
def rsi(data, periods=14):
    delta = data['Close'].diff()
    gain, loss = delta.copy(), delta.copy()
    gain[gain < 0] = 0
    loss[loss > 0] = 0

    avg_gain = gain.rolling(window=periods).mean()
    avg_loss = -loss.rolling(window=periods).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi
df['RSI'] = rsi(df)
df['MACD'], df['Signal'] = macd(df)

df = df.drop(['Date','Close', 'Volume', 'Year', 'Week'], axis=1).assign(Target=df.pop('Target'))
df.dropna(inplace=True)

X = df.drop(['Target'],axis=1)
y = df['Target']

X.head()

"""# 3. Implement Model"""

# TimeSeriesSplit object
tscv = TimeSeriesSplit(n_splits=5)
# Define hyperparameter distributions to sample from
# Set initial value for 'C' from basin-hopping
initial_C = 0.1

# Define hyperparameter search space for RandomizedSearchCV
param_dist = {
    'penalty': ['l1', 'l2', 'elasticnet', 'none'],
    'C': [initial_C] + list(np.logspace(-4, 4, 100)),
    'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],
    'max_iter': np.random.randint(100, 1000, size=(10,)),
    'fit_intercept': [True, False]
}

# Create logistic regression model
logreg = LogisticRegression()
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Perform randomized search with cross-validation
random_search = RandomizedSearchCV(logreg, param_distributions=param_dist, n_iter=100, cv=tscv, refit='accuracy')
random_search.fit(X_scaled, y)

# Retrieve best hyperparameters and best model
best_params = random_search.best_params_
best_model = random_search.best_estimator_

accuracys = []
roc_aucs = []
f1_scores = []
precisions = []
recalls = []
conf_matrices = []

for train_index, test_index in tscv.split(X):
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]

        # Scale the features for the current train-test split
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)

        # Make predictions on the test set
        y_pred = best_model.predict(X_test_scaled)
        y_pred_proba = best_model.predict_proba(X_test_scaled)[:, 1]

        # Calculate performance metrics
        # Calculate performance metrics
        accuracys.append(accuracy_score(y_test, y_pred))
        roc_aucs.append(roc_auc_score(y_test, y_pred_proba))
        f1_scores.append(f1_score(y_test, y_pred))
        precisions.append(precision_score(y_test, y_pred))
        recalls.append(recall_score(y_test, y_pred))
        conf_matrices.append(confusion_matrix(y_test, y_pred))

print("-------------")
print("Average Accuracy: ", sum(accuracys) / len(accuracys))
print("Average ROC AUC Score: ", sum(roc_aucs) / len(roc_aucs))
print("Average F1 Score: ", sum(f1_scores) / len(f1_scores))
print("Average Precision: ", sum(precisions) / len(precisions))
print("Average Recall: ", sum(recalls) / len(recalls))

random_search.best_params_

param_grid = random_search.best_params_

# Perform grid search with cross-validation
grid_search = GridSearchCV(pipeline, param_grid=param_grid, cv=tscv, n_jobs=-1)
grid_search.fit(X_scaled, y)

# Retrieve the best hyperparameters and the best model
best_params = grid_search.best_params_
best_model = grid_search.best_estimator_

# Calculate performance metrics on the test set
accuracys = []
roc_aucs = []
f1_scores = []
precisions = []
recalls = []
conf_matrices = []

for train_index, test_index in tscv.split(X):
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]

        # Scale the features for the current train-test split
        scaler = StandardScaler()
        X_train_scaled = scaler.fit_transform(X_train)
        X_test_scaled = scaler.transform(X_test)

        # Make predictions on the test set
        y_pred = best_model.predict(X_test_scaled)
        y_pred_proba = best_model.predict_proba(X_test_scaled)[:, 1]

        # Calculate performance metrics
        accuracys.append(accuracy_score(y_test, y_pred))
        roc_aucs.append(roc_auc_score(y_test, y_pred_proba))
        f1_scores.append(f1_score(y_test, y_pred))
        precisions.append(precision_score(y_test, y_pred))
        recalls.append(recall_score(y_test, y_pred))
        conf_matrices.append(confusion_matrix(y_test, y_pred))

print("-------------")
print("Average Accuracy: ", sum(accuracys) / len(accuracys))
print("Average ROC AUC Score: ", sum(roc_aucs) / len(roc_aucs))
print("Average F1 Score: ", sum(f1_scores) / len(f1_scores))
print("Average Precision: ", sum(precisions) / len(precisions))
print("Average Recall: ", sum(recalls) / len(recalls))

random_search.best_params_